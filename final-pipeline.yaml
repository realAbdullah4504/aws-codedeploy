AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with IAM role and user data

Parameters:
  SecurityGroup:
    Type: String
    Description: Name of the security group for the EC2 instance
    Default: jenkins-agent
    MinLength: 1

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the SSH key pair to use for EC2 instance
    Default: keypair
  
  MongoDBVolumeId:
    Type: String
    Default: ""
    Description: "Existing volume ID (leave empty for new volume)"


Conditions:
  CreateVolume: !Equals [!Ref MongoDBVolumeId, ""]
  NotCreateVolume: !Not [!Equals [!Ref MongoDBVolumeId, ""]]

Resources:

  ##########################
  # EC2 server configuration
  ##########################

  MongoDBVolume:
    Type: AWS::EC2::Volume
    DeletionPolicy: Retain    # Prevents accidental deletion of data
    Condition: CreateVolume
    Properties:
      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
      Size: 2
      VolumeType: gp3
      Tags:
        - Key: Name
          Value: MongoDB-Data
  
  MongoDBVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdf    # Device name for Linux instances
      InstanceId: !Ref EC2Instance
      VolumeId: 
        "Fn::If":
          - CreateVolume
          - !Ref MongoDBVolume
          - !Ref MongoDBVolumeId 

  EC2S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      RoleName: EC2S3FullAccessRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2S3FullAccessRole
      InstanceProfileName: EC2InstanceProfile

  EC2Instance:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT3M
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0fd05997b4dff7aac
      Tags:
        - Key: Name
          Value: jenkins-agent
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # Update system packages
          sudo yum update -y

          # Device and Mount Point

          DEVICE="/dev/xvdf"
          MOUNT_POINT="/var/lib/mongo"
          while [ ! -e $DEVICE ]; do 
          echo "Waiting for device $DEVICE to appear..."
          sleep 1; 
          done

          # Check if the device is formatted as ext4
          if ! blkid $DEVICE | grep -q "TYPE=\"ext4\""; then
            echo "Formatting $DEVICE as ext4..."
            # Ensure the device is not mounted before formatting
            sudo umount $DEVICE || true
            sudo mkfs.ext4 $DEVICE
          fi

          # Create the mount point if it doesn't exist
          sudo mkdir -p $MOUNT_POINT

          # Mount the device
          echo "Mounting $DEVICE to $MOUNT_POINT..."
          sudo mount $DEVICE $MOUNT_POINT

          # Update /etc/fstab to ensure persistence
          if ! grep -qs "$DEVICE" /etc/fstab; then
            echo "$DEVICE $MOUNT_POINT ext4 defaults,nofail 0 2" | sudo tee -a /etc/fstab
          fi

          # Install required dependencies
          sudo yum install -y ruby wget

          # Install AWS CodeDeploy agent
          cd ~
          wget https://aws-codedeploy-us-west-2.s3.us-west-2.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto

          # Add MongoDB Repository
          cat << 'EOF' | sudo tee /etc/yum.repos.d/mongodb-org-8.0.repo
          [mongodb-org-8.0]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/8.0/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://pgp.mongodb.com/server-8.0.asc
          EOF

          # Install MongoDB components
          sudo yum install -qy mongodb-mongosh-shared-openssl3
          sudo yum install -y mongodb-org-8.0.4 mongodb-org-database-8.0.4 mongodb-org-server-8.0.4 mongodb-org-mongos-8.0.4 mongodb-org-tools-8.0.4

          # Start MongoDB service
          sudo systemctl start mongod
          sudo systemctl enable mongod

          # Signal EC2 instance completion
          # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}


  ##########################
  # CodeBuild Frontend Configuration
  ##########################

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      RoleName: CodeBuildRole

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      Artifacts:
        Type: S3
        Location: 123456-abdullah-bucket
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: GITHUB
        Auth:
          Type: OAUTH
        Location: https://github.com/realAbdullah4504/aws-codedeploy.git
        BuildSpec: buildspec.yaml
      SourceVersion: cloud-formation-stack

  ##########################
  # CodeDeploy Frontend Configuration
  ##########################

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

      RoleName: CodeDeployRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-app
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - CodeDeployApplication
      - EC2Instance
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${AWS::StackName}-deployment-group
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: Name
          Value: jenkins-agent
          Type: KEY_AND_VALUE
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE

  ##########################
  # CodePipeline Frontend resources
  ##########################
  CodePipelineArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::588738579221:policy/service-role/AWSCodePipelineServiceRole-ap-south-1-final
      RoleName: CodePipelineRole

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                FullRepositoryId: realAbdullah4504/aws-codedeploy
                BranchName: cloud-formation-stack
                ConnectionArn: arn:aws:codeconnections:ap-south-1:588738579221:connection/51340ca1-e197-4f09-ab0c-bccdc806b303
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeploy
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              RunOrder: 1

  ##########################
  # CodeBuild Backend resources
  ##########################
  CodeBuildProjectBackend:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build-backend
      Artifacts:
        Type: S3
        Location: 123456-abdullah-bucket
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: GITHUB
        Auth:
          Type: OAUTH
        Location: https://github.com/realAbdullah4504/aws-codedeploy.git
        BuildSpec: backend/buildspec.yaml
      SourceVersion: cloud-formation-stack

  ##########################
  # CodeDeploy Backend resources
  ##########################
  CodeDeployApplicationBackend:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-app-backend
      ComputePlatform: Server

  CodeDeployDeploymentBackendGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - CodeDeployApplication
      - EC2Instance
    Properties:
      ApplicationName: !Ref CodeDeployApplicationBackend
      DeploymentGroupName: !Sub ${AWS::StackName}-deployment-backend-group
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: Name
          Value: jenkins-agent
          Type: KEY_AND_VALUE
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
  ##########################
  # CodePipeline Backend resources
  ##########################

  CodePipelineBackend:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                FullRepositoryId: realAbdullah4504/aws-codedeploy
                BranchName: cloud-formation-stack
                ConnectionArn: arn:aws:codeconnections:ap-south-1:588738579221:connection/51340ca1-e197-4f09-ab0c-bccdc806b303
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProjectBackend
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeploy
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplicationBackend
                DeploymentGroupName: !Ref CodeDeployDeploymentBackendGroup